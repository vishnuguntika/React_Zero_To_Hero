Chapter-6: Exploring the World
---------------------------------

1. What is Microservice?
Ans:

Dividing a Project into chunks of parts.
Like: UI, Backend,Notification, Logs, Authentificatin, etc...
Where we can write any programming code language of our chunks.

Ex: Food Villa as UI.

So, we can deploy separately, if they need to change any part of project.

" Microservices is a small, loosely coupled service that is designed to perform a specific business function and each microservice can be developed, deployed, and scaled independently".


2)  What is Monolith architecture?

Ans: Monolithic architecture is a software design methodology that combines all of an application's components into a single, inseparable unit. Under this architecture, the user interface, business logic, and data access layers are all created, put into use, and maintained as a single entity.

3)  What is the difference between Monolith and Microservice?
Ans:

The choice between monolithic and microservice architectures depends on various factors such as the size and complexity of the application, team competency, and infrastructure requirements.

Monolithic architecture are suitable for simple applications or prototypes,

While, microservices are better for complex systems that require high scalability and flexibility.

Monolithic - simple and ease development
Microservices - scalability and flexibility.

4)  Why do we need a useEffect Hook?
Ans: 
The useEffect Hook takes 2 arguments: a callback function (effect) and an optional array of depedencies. The effect function contains the code you want to run after the component renders, and the dependencies array specifies when the effect should re-run.

example: 

import { useState, useEffect } from 'react';

function Timer() {
const [count, setCount] = useState(0);

useEffect(() => {
const timer = setTimeout(() => {
setCount(count + 1);
}, 1000);

return () => clearTimeout(timer); // Cleanup function
}, [count]); // Dependency array

return <h1>I've rendered {count} times!</h1>;
}

5)  What is Optional Chaining?
Ans: 
Optional chaining is a feature that allows you to access properties and methods of objects or arrays that may be null or undefined. 
The optional chaining operator (?.) short circuits the expression and returns undefined or nil if the object or array is null or undefined. 
Optional chaining simplifies the process of querying and calling nested properties and methods without explicit null or undefined checks.

6)  What is Shimmer UI?
Ans: A shimmer screen is a version of the UI that doesn’t contain actual content.
Instead, it mimics the page’s layout by showing its elements in a shape similar to the actual content as it is loading and becomes available.

7)  What is the difference between JS expression and JS statement
Ans:
JavaScript Expression:
Definition:	A piece of code that produces a value
Returns a Value?:	Yes
Used in Variables?:	Can be assigned to a variable
Examples:	10 + 5, "Hello", age > 18

JS statement:
Definition: A full instruction that performs an action
Returns a Value?: Not necessarily
Used in Variables?: Cannot be assigned to a variable
Examples: if, for, while, function

combination of both: {(a=5), console.log(a)} => javascript expression.

8)  What is Conditional Rendering, explain with a code example
Ans: 
Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.

Example: 

function Item({ name, isPacked }) {
  return <li className="item">{name}</li>;
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}

9)  What is CORS?
Ans:

Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to specify any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. This is crucial for enabling web applications to interact with resources hosted on different domains securely

10)  What is async and await?
Ans: 

The async keyword is used to define an asynchronous function. When you prefix a function with async, it always returns a promise. If the function returns a value, JavaScript automatically wraps it in a resolved promise.

Example:

async function myFunction() {
return "Hello";
}

myFunction().then(value => console.log(value)); // Output: Hello

The await keyword can only be used inside an async function. It makes JavaScript wait until the promise settles and returns its result. This allows you to write code that pauses execution until the promise is resolved, making it easier to handle asynchronous operations.

Example:

async function getData() {
let promise = new Promise((resolve, reject) => {
setTimeout(() => resolve("Hello World"), 1000);
});

let result = await promise; // Waits until the promise resolves
console.log(result); // Output: Hello World
}

getData();

Example:

async function fetchData() {
try {
let response = await fetch('https://api.example.com/data');
let data = await response.json();
console.log(data);
} catch (error) {
console.error('Error fetching data:', error);
}
}

fetchData();


11)  What is the use of `const json = await data.json();` in getRestaurants()

Ans:

The fetch function is used to make a network request to the specified URL.

await fetch('https://api.example.com/restaurants') waits for the fetch request to complete and returns a response object.

await data.json() parses the response body as JSON and assigns it to the json variable.
The function returns the parsed JSON data, which would be the restaurant information.


