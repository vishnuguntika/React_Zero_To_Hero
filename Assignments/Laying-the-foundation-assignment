1) What is JSX?
Ans: 
JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code inside JavaScript. It is primarily used with React to describe what the UI should look like.

2) Superpowers of JSX

Ans:
1) JavaScript inside HTML-Like Code
2) Prevents Cross-Site Scripting (XSS) Attacks
3) Conditional Rendering without if-else
4) Supports inline styling with objects
5) React Elements without createElement()

3) Role of type attribute in script tag? What options can I use there?
Ans: 
Modern browsers default to text/javascript, so itâ€™s often omitted.
type="module" is essential for ES6 module-based JavaScript.
Other types like application/json or importmap serve special use cases.
Old types like text/ecmascript are obsolete and should be avoided.

4) {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX

Ans:
Use {TitleComponent} when passing a component as a reference (e.g., props or dynamic rendering).
Use {<TitleComponent/>} when rendering a component inline without children.
Use {<TitleComponent></TitleComponent>} when you need to pass children inside the component.


*Q. What converts New Code to Older Code(For older version Browsers)? 
A: Babel 
We do not need to write polyfill. Babel does it automatically.

npx - executing commands without downloading packages
npm - will download required packages

Note: Parcel will not remove console.log automatically. We need to configure for it. There is a package for it, named 'babel-plugin-transform-remove-console' either from babel website or npmjs website: npm install babel-plugin-transform-remove-console --save-dev /-D

Usage: 1.via .babelrc (recommended)
    2. via CLI
    3. via NodeAPI

React-key Reconciliation :
When there are siblings in an array, we need to give keys for each sibling
HW: Read about React-key Reconciliation from React Docs.

React.createElement gives us an Object, which is then converted to html and puts into DOM
JSX uses React.createElement (behind the scenes), which gives Object, and then into HTML, and it is put into DOM
Babel does it. Babel converts JSX. JSX was developed by Facebook.
Babel is must to use JSX.

Q. Is JSX HTML inside JS? No. 
A: JSX is a HTML like Syntax, and not HTML inside JS.

Babel: Compiler for JS.
Read Babel Docs: babeljs.io
Play with Babel in it's website.
Babel comes along with Parcel.

Also Go to it's GitHub Repo, and read about its algorithms.

React Component:
2 Types:
1. Functional Component- NEW
2. Class Based Component - OLD

Functional Comp is just a normal function that returns some piece of JSX, or a react element, or a function. 

Name of a Component starts with a Capital Letter (not mandatory, but good practice to use)

If we have to write multiple lines to be returned in a component, we need to use ()and ; at the end.

 For Homework, use Normal Convention.

Continued... Part 2

Hope it was Helpful ??
Notes Part 2:

Diff b/n React Element & React Component:

React Element is returning an Object.
React Component is a function that returns JSX, or a react element, or a function.

Syntax When rendering:
For React Element, We use root.render(element_name);
For React Component, We use Angular brackets: root.render(<ComponentName />);

 Any piece of Javascript code can be written within {} 

XSS - Cross site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. Attackers often initiate an XSS attack by sending a malicious link to a user and enticing the user to click it.

JSX takes care of XSS.

*Interview Q: Component Composition:
A: Writing/ Passing component inside component.

Home Work:
1. Read about React-key Reconciliation from React Docs.


Hope it was Helpful ??